#!/usr/bin/python

import Queue
import threading
import thread
import time

exitFlag = 0

class syncThread (threading.Thread):
   def __init__(self, threadID, name, func, data):
      threading.Thread.__init__(self)
      self.threadID = threadID
      self.name = name
      self.func = func
      self.data = data
   def run(self):
      print "Starting " + self.name
      self.data = process_data(self.name, self.func, self.data)
      print "Exiting " + self.name

def process_data(threadName, func, data):
   while not exitFlag:
      threadLock.acquire()
      create_async_threads(func, data)
            threadLock.release()
            print "%s processing %s" % (threadName, func)
         else:
            queueLock.release()
         time.sleep(1)
         return data

def create_thread(func, data):
  assert_condition = True if funcList.len() == dataList.len() else False
  assert assert_condition, "Make sure lists are equal length"
  try:
    for i in func:
      thread.start_new_thread(func[i], data[i])
  except:
    print("Error Creating Thread")
