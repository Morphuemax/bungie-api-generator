package lib.api;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import java.util.HashMap;
import org.openide.util.MapFormat;
import Helpers.HttpUtils;
import java.io.IOException;
{{#imports}}
{{#enums}}
import lib.enums.{{.}};
{{/enums}}
{{#models}}
import lib.models.{{.}};
{{/models}}
{{#responses}}
import lib.responses.{{.}};
{{/responses}}
{{/imports}}

public class {{tag}}{
{{#methods}}

    /**
    / {{method_desc}}
    {{#param_info}}
        / @param {{param_name}}:{{{param_type}}} {{param_desc}}
    {{/param_info}}
    /
    / <a href="https://bungie-net.github.io/#{{endpoint_tag}}.{{method_name}}">{{endpoint_tag}}.{{method_name}}</a>
    */

    public static {{{return_type}}} {{method_name}}(
    {{#param_info}}
        {{#required}}{{{param_type}}} {{param_name}}, {{/required}}
    {{/param_info}}
    {{#has_request_body}}{{{request_type}}} requestBody, {{/has_request_body}}HttpUtils util) throws IOException
    {
    String path_unformatted = "{{path}}";
    String path = path_unformatted{{#param_info}}{{#required}}
        .replace("{{=<% %>=}}{<%={{ }}=%>{{param_name}}{{=<% %>=}}}<%={{ }}=%>", {{param_name}}.toString())
    {{/required}}{{/param_info}};
    {{#has_request}}Gson gson = new Gson();{{/has_request}}
    JsonObject responseJson = util.{{endpoint_type}}BungieEndpoint(path{{#has_request_body}}, (JsonObject) gson.toJsonTree(requestBody){{/has_request_body}});
    {{{return_type}}} response = new {{{return_type}}}(responseJson);
    if(!responseJson.get("ErrorCode").equals(200)){
    System.out.println("Error: "+responseJson.get("DetailedErrorTrace"));
    }
    return response;
    }

    {{#has_query}}
    public static {{{return_type}}} {{method_name}}(
    {{#param_info}}{{{param_type}}} {{param_name}},
    {{/param_info}}{{#has_request_body}}{{{request_type}}} requestBody, {{/has_request_body}}
    HttpUtils util)throws IOException{
        String path_unformatted = "{{path}}";
        HashMap map = new HashMap();
        String path = path_unformatted{{#param_info}}{{#required}}
            .replace("{{=<% %>=}}{<%={{ }}=%>{{param_name}}{{=<% %>=}}}<%={{ }}=%>", {{param_name}}.toString())
        {{/required}}{{/param_info}};
        String query_params = "?";
        {{#param_info}}{{#isQuery}}String {{param_name}}_query = "{{param_name}}=";
        {{#isArray}}for(var c : {{param_name}}){
            if(c!={{param_name}}[0])
                {{param_name}}_query += ",";
            {{param_name}}_query += c; }
        {{/isArray}}{{^isArray}}{{param_name}}_query += {{param_name}};{{/isArray}}{{/isQuery}}{{/param_info}}
        query_params += {{#param_info}}{{#isQuery}}{{param_name}}_query{{^last}}+"&"+{{/last}}{{/isQuery}}{{/param_info}};
        path += query_params;
        {{#has_request}}Gson gson = new Gson();{{/has_request}}
        JsonObject responseJson = util.{{endpoint_type}}BungieEndpoint(path{{#has_request_body}}, (JsonObject) gson.toJsonTree(requestBody){{/has_request_body}});
        {{{return_type}}} response = new {{{return_type}}}(responseJson);
        if(!responseJson.get("ErrorCode").equals(200)){
        System.out.println("Error: "+responseJson.get("DetailedErrorTrace"));
        }
        return response;
        }
    {{/has_query}}
{{/methods}}
}
