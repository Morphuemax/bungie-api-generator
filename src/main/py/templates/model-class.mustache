package lib.models;

import java.util.Map;
import java.util.HashMap;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import Helpers.ResponseObject;
import java.util.EnumSet;
import com.google.gson.annotations.SerializedName;
{{#imports}}
{{#enums}}
import lib.enums.{{.}};
{{/enums}}
{{#models}}
import lib.models.{{.}};
{{/models}}
{{/imports}}

public class {{class_name}}{

    {{#properties}}
    @SerializedName("{{property_name}}")
    {{#is_bitmask}}{{{raw_type}}}{{/is_bitmask}}{{^is_bitmask}}{{{property_type}}}{{/is_bitmask}} {{property_name}}{{^isEnum}}{{^isPrimitive}}{{#isArray}}{{#isModel}} = new {{{property_type}}}{ }{{/isModel}}{{/isArray}}{{^isArray}} = new {{#isMap}}Hash{{/isMap}}{{{property_type}}}(){{#isMap}}{}{{/isMap}}{{/isArray}}{{/isPrimitive}}{{/isEnum}};
    {{#is_bitmask}}
    EnumSet<{{property_type}}>{{#isArray}}[]{{/isArray}} {{property_name}}Set;
    {{/is_bitmask}}

    {{/properties}}
    JsonElement json;

    public {{class_name}}(){
    }

    public {{class_name}}({{class_name}} model){
        GsonBuilder gsonBuilder = new GsonBuilder();
        Gson gson = gsonBuilder.create();
        json = gson.toJsonTree(model);
        {{class_name}} temp = model;
        {{#properties}}
        this.{{property_name}} = temp.get{{Property_Name}}();
        {{/properties}}
        // Allows Garbage Collector to delete 'temp' to free up space
        temp = null;
    }

public {{class_name}}(JsonElement jsonElement){
try{
json = jsonElement;
GsonBuilder gsonBuilder = new GsonBuilder();
Gson gson = gsonBuilder.create();
{{class_name}} temp = gson.fromJson(jsonElement, {{class_name}}.class);
{{#properties}}
    this.{{property_name}} = temp.get{{Property_Name}}();
{{/properties}}
// Allows Garbage Collector to delete 'temp' to free up space
temp = null;
}catch(NullPointerException e){ }
}

{{#properties}}
    public {{#is_bitmask}}{{{raw_type}}}{{/is_bitmask}}{{^is_bitmask}}{{{property_type}}}{{/is_bitmask}} get{{Property_Name}}(){
        return {{property_name}};
    }
    {{#is_bitmask}}public EnumSet<{{property_type}}>{{#isArray}}[]{{/isArray}} get{{Property_Name}}Set() {
    if({{property_name}}Set == null){
    {{#isArray}}for(int i = 0; i < {{property_name}}.length; i++){ {{/isArray}}
    {{property_name}}Set{{#isArray}}[i]{{/isArray}} = {{property_type}}.fromType({{property_name}}{{#isArray}}[i]{{/isArray}});{{#isArray}}
        } {{/isArray}}
    }
    return {{property_name}}Set;
    }
    {{/is_bitmask}}
    {{#isRequest}}
    public void set{{Property_Name}}({{{property_type}}} {{property_name}}){
        this.{{property_name}} = {{property_name}};
    }
    {{/isRequest}}
    {{/properties}}
    public JsonElement getAsJson(){
        if(json==null){
            Gson gson = new Gson();
            json = gson.toJsonTree(this);
        }
        return json;}
}
