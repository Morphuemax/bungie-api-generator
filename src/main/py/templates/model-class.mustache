package lib.models;

import java.util.Map;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import Helpers.ResponseObject;
import java.util.EnumSet;
{{#imports}}
{{#enums}}
import lib.enums.{{.}};
{{/enums}}
{{#models}}
import lib.models.{{.}};
{{/models}}
{{/imports}}

public class {{class_name}}{

    {{#properties}}
    {{#is_bitmask}}{{{raw_type}}}{{/is_bitmask}}{{^is_bitmask}}{{{property_type}}}{{/is_bitmask}} {{property_name}}; // {{#is_bitmask}}EnumSet<{{property_type}}>{{property_name}}Set;{{/is_bitmask}}
    {{/properties}}
    JsonElement json;

    public {{class_name}}(JsonElement jsonElement){
        json = jsonElement;
        GsonBuilder gsonBuilder = new GsonBuilder();
        Gson gson = gsonBuilder.create();
        {{class_name}} temp = gson.fromJson(jsonElement, {{class_name}}.class);
        {{#properties}}
        this.{{property_name}} = temp.get{{Property_Name}}();
        {{/properties}}
        // Allows Garbage Collector to delete 'temp' to free up space
        temp = null;
    }

    {{#properties}}
    public {{#is_bitmask}}{{{raw_type}}}{{/is_bitmask}}{{^is_bitmask}}{{{property_type}}}{{/is_bitmask}} get{{Property_Name}}(){
        return {{property_name}};
    }
    {{#isRequest}}
    public void set{{Property_Name}}({{{property_type}}} {{property_name}}){
        this.{{property_name}} = {{property_name}};
    }
    {{/isRequest}}
    {{/properties}}
    public JsonElement getAsJson(){ return json;}
}
