package lib.enums;

import com.google.gson.annotations.SerializedName;
import java.util.EnumSet;


public enum {{class_name}}{
    {{#values}}
    /* {{description}} */
    @SerializedName("{{numericValue}}")
    {{identifier}}("{{identifier}}", ({{cast_type}}){{numericValue}}),

    {{/values}};

    private {{enum_type}} enumValue;
    private String enumName;

	private {{class_name}}(String bungieEnumName, {{enum_type}} bungieEnumValue) {
this.enumName = bungieEnumName;
this.enumValue = bungieEnumValue;
}

@Override
public String toString(){
return enumName;
}

public {{enum_type}} getTypeDefinition() {
	    return enumValue;
    }

    {{#is_bitmask}}
    public static EnumSet<{{class_name}}> fromType({{enum_type}} enumId) {
        EnumSet<{{class_name}}> codesList = EnumSet.noneOf({{class_name}}.class);
        for ({{class_name}} code : values()) {
    if ((enumId & code.getTypeDefinition()) != 0) {
    codesList.add(code);
    }
    }
    return codesList;
    }

    public static {{enum_type}} toType(EnumSet<{{class_name}}> enumList) {
    if (enumList == null || enumList.isEmpty()) {
    throw new IllegalArgumentException("Null or empty EnumSet<{{class_name}}>");
    }
    {{cast_type}} returnValue = 0;
    for ({{class_name}} code : enumList) {
    returnValue |= code.getTypeDefinition();
    }
    return returnValue;
    }
    {{/is_bitmask}}
}
